[{"categories":["编程技术"],"content":"本系列主要介绍数据库和 SQL 的基础知识，使用的教材是SQL必知必会。 数据库(database)是保存有组织的数据的容器（通常是一个文件或一组文件）。简单来说，数据库是一个用于存储大量数据的系统。它允许你快速地存储、检索和更新数据。这些数据可以是客户信息、销售数据、财务数据等。 数据库又可根据数据的存储方式分成不同的种类，例如： 关系数据库（例如：MySQL、Oracle、SQL Server） 非关系数据库（例如：MongoDB、Redis） SQL (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统（RDBMS）。 SQL 的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。 人们通常用数据库这个术语来代表他们使用的数据库软件，这是不正确的，也因此产生了许多混淆。确切地说，数据库软件应称为数据库管理系统(DBMS) 数据库是通过DBMS创建和操纵的容器，而具体它究竟是什么，形式如何，各种数据库都不一样。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:0:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"1. 关系型数据库 关系型数据库是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。简单说，关系型数据库是由多张能互相连接的表组成的数据库。 你往文件柜里放资料时，并不是随便将它们扔进某个抽屉就完事了的，而是先准备好一个资料袋，然后将相关的资料放入特定的资料袋中。在数据库领域中，这种资料袋称为表。表是一种结构化的文件，可用来存储某种特定类型的数据。表可以保存顾客清单、产品目录，或者其他信息清单。 优点 都是使用表结构，格式一致，易于维护。 使用通用的 SQL 语言操作，使用方便，可用于复杂查询。 数据存储在磁盘中，安全。 缺点 读写性能比较差，不能满足海量数据的高效率读写。 不节省空间。因为建立在关系模型上，就要遵循某些规则，比如数据中某字段值即使为空仍要分配空间。 固定的表结构，灵活度较低。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:1:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"2. 非关系数据库（NoSQL） 非关系型数据库被称为 NoSQL（Not Only SQL )，意为不仅仅是 SQL。通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定。 优点 非关系型数据库存储数据的格式可以是 key-value 形式、文档形式、图片形式等。使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。 速度快，效率高。 NoSQL 可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘。 海量数据的维护和处理非常轻松。 非关系型数据库具有扩展简单、高并发、高稳定性、成本低廉的优势。 可以实现数据的分布式处理。 缺点 非关系型数据库暂时不提供 SQL 支持，学习和使用成本较高。 非关系数据库没有事务处理，没有保证数据的完整性和安全性。适合处理海量数据，但是不一定安全。 功能没有关系型数据库完善。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:2:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"3. MySQL 为了更好地应用SQL，我们需要安装一个MySQL便于学习过程中进行练习。 MySQL 是最流行的数据库之一，是一个免费开源的关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 适合中小型软件，被个人用户以及中小企业青睐。 针对不同的用户，MySQL 分为两个版本： MySQL Community Server（社区版）：该版本是自由下载且完全免费的，但是官方不提供技术支持。 MySQL Enterprise Server（企业版）：该版本是收费的，而且不能下载，但是该版本拥有完善的技术支持 MySQL 的命名机制由 3 个数字和 1 个后缀组成，例如 mysql-5.7.20： 第 1 个数字“5”是主版本号，用于描述文件的格式，所有版本 5 的发行版都有相同的文件夹格式。 第 2 个数字“7”是发行级别，主版本号和发行级别组合在一起便构成了发行序列号。 第 3 个数字“20”是在此发行系列的版本号，随每次新发行的版本递增。通常选择已经发行的最新版本。 MySQL 的主要特点就是免费，并且在任何平台上都能使用，占用空间相对较小。 MySQL 是 C/S 架构，有 Client 和 Server 两部分，可以都安装在一台电脑上，也可以独立安装。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:3:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"4. 安装与配置 官方下载页面：https://dev.mysql.com/downloads/ MacOS安装可参考这个视频： ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:4:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"5. 图形化管理工具 常用的图形化管理工具有 MySQL Workbench 和 Navicat，前者是官方提供的工具，但后者比较好用。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:5:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"6. SQL 对数据库进行查询和修改操作的语言叫做 SQL（Structured Query Language，结构化查询语言）。SQL 语言是目前广泛使用的关系数据库标准语言，是各种数据库交互方式的基础。SQL包括四部分 数据定义语言（Data Definition Language，DDL）：用来创建或删除数据库以及表等对象，主要包含以下几种命令： DROP：删除数据库和表等对象 CREATE：创建数据库和表等对象 ALTER：修改数据库和表等对象的结构 数据操作语言（Data Manipulation Language，DML）：用来变更表中的记录，主要包含以下几种命令：- SELECT：查询表中的数据 INSERT：向表中插入新数据 UPDATE：更新表中的数据 DELETE：删除表中的数据 数据查询语言（Data Query Language，DQL）：用来查询表中的记录，主要包含 SELECT 命令，来查询表中的数据。 数据控制语言（Data Control Language，DCL）：用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对数据库中的用户设定权限。主要包含以下几种命令： GRANT：赋予用户操作权限 REVOKE：取消用户的操作权限 COMMIT：确认对数据库中的数据进行的变更 ROLLBACK：取消对数据库中的数据进行的变更 我们将在接下来的几篇文章中学习它们。 SQL 的几个易错书写规则如下 以分号 ; 结尾 SQL 语句不区分大小写 单词需要半角空格或换行来分隔 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:6:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"Hugo 是由 Go 语言实现的静态网站生成器，可以快速建立一个静态网站，虽然多数情况下用来搭建个人博客，但也可以用作展示在线书籍、个人简历等。 最早我也是使用 Hugo 搭建的个人博客，由于之前才疏学浅，我所使用的博客出现了一些 bug，我无法修复，因此也很久没有更新过文章。借着 2023 年的春节，我重新搭建了这个博客。其中很多细节已经忘记了，因此耗费了我不少时间，为了节约精力，因而有了这篇文章小记，方便自己以及后人。 本文用来记录 Hugo 使用种遇到的问题和积累的经验。本文是第一篇（也许也是最后一篇），介绍博客网站搭建的过程和一些基础配置。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"1. 安装Hugo 安装Hugo前请确保您的电脑上已安装了 Git 和 Go 。 详细的安装说明参见官方文档，这里简单介绍 MacOS 的快速安装。 MacOS 下可自行从官网下载软件包安装，也可以使用 Homebrew 包管理工具快速安装 # 更新homebrew到最新 % brew update # 安装hugo（用homebrew默认安装扩展版本） % brew install hugo # 检查安装 % brew list 注意要安装 extended 版本，主要是因为很多主题都需要扩展版的功能，如果确认自己的主题不需要(阅读主题说明)，可以按照正常的版本。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"2. 生成博客网站 执行下面的命令在本地生成博客网站项目文件夹，该文件夹是这一系列文章之后所有操作执行的根目录(简称为项目根目录)，我建立的项目文件夹名为 cloud1998.github.io （因为之后要使用 Github Pages 托管博客）。 % hugo new site cloud1998.github.io % cd cloud1998.github.io blog 文件夹的目录结构如下所示： % ls config.toml layouts static archetypes content themes assets data resources 其中： config.toml 是博客的配置文件 content 是博客文章存放的地方 themes 是博客主题目录 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"3. 安装主题 Hugo没有默认主题，需要自己从官方的主题列表下载安装。其中 LoveIt 是我喜欢的主题。因为主题通常是单独的 Github 仓库，因此将其作为博客项目的子模块进行管理。 # 初始化项目目录为 git 仓库 git init # 将主题项目作为子模块添加 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 复制主题提供的站点配置文件 config.toml 到项目根目录，覆盖 Hugo 本身的站点配置文件。 请打开下面的代码块查看完整的配置⬇️： baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 默认每页列表显示的文章数目 paginate = 12 # 谷歌分析代号 [UA-XXXXXXXX-X] googleAnalytics = \"\" # 版权描述，仅仅用于 SEO copyright = \"\" # 是否使用 robots.txt enableRobotsTXT = true # 是否使用 git 信息 enableGitInfo = true # 是否使用 emoji 代码 enableEmoji = true # 忽略一些构建错误 ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [params] # 网站默认主题样式 [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站标题, 用于 Open Graph 和 Twitter Cards title = \"我的网站\" # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \"这是我的全新 Hugo 网站\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # 移动端导航栏模式 [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"我的网站\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 (允许 HTML 格式) subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"4. 网站配置 正式使用前，我们需要编辑站点配置文件从而设置网站的一些内容，上面的配置文件已经进行了详细的说明，如有更多疑问请查阅LoveIt官方主题文档。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"4.1 头像 新建static/images文件夹，将头像文件 avatar.png 存放在这里。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:1","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"4.2 网站图标 使用 favicon generator 生成配套的网站图标，放到 /static 目录下，可以设置网站在各平台的显示图标，包括如下内容 android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png browserconfig.xml cover.png favicon.ico favicon-16x16.png favicon-32x32.png logo.png mstile-150x150.png safari-pinned-tab.svg site.webmanifest 然后修改站点配置文件中的配置项即可。 更多配置可以参考Mogeko的个人博客 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:2","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"5. 托管到Github 将本地的所有项目文件提交到本地仓库中。 % git add . % git commit -m \"Initial commit\" 浏览器打开 Github 网站，创建和项目文件夹同名的仓库，该仓库用于存储项目文件夹下所有内容。创建完成后，在本地项目根目录，执行下列命令，将项目文件推送到远程仓库。 % git remote add origin https://github.com/cloud1998/cloud1998.github.io.git % git push -u origin main 关于网页如何托管在Github的详细说明可以参考Host on Github ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"5.1 源码备份 按照 Hugo 的生成规则，执行 hugo 命令后，网站静态文件将会生成在 public 文件夹。但由于我们使用 Github Pages 托管博客网站，该功能启用后 Github 仓库只会从 main branch 或 main branch 中的 /docs 目录下读取网站源码。 我们解决这一问题的方法是新建 blog 分支将博客源码放在该分支下，利用 Github Action 自动根据 blog 分支的博客源码执行 hugo 命令，并将生成的结果推送到 main 分支。首先在本地项目根目录下执行下列命令新建并切换到 blog 分支。 注：Github Action 的说明见附录I % git checkout -b blog % git branch * blog main # 将新分支推送到远程仓库 并建立跟踪关系 % git push -u origin blog 在使用 “git push” 时，第一次推送新分支时，需要使用 “–set-upstream” 或 “-u” 选项，以便在远程仓库中设置跟踪关系。 将本地 blog 分支的内容推送到远程仓库后，在网页端进入cloud1998.github.io仓库的设置页面，将默认分支设置为 blog 分支。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:1","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"5.2 推送到main分支 首先生成公私钥供 Github Action 使用 ssh-keygen -t rsa -b 4096 -C \"$(git config user.email)\" -f blog -N \"\" # You will get 2 files in current file: # blog.pub (public key) # blog (private key) 然后进入 cloud1998.github.io 仓库设置页面，在 Deploy Keys 中添加公钥，在 Secrets 中添加私钥，私钥名设置为 ACTIONS_DEPLOY_KEY 接着新建 YAML 配置文件，Github Action 要求配置文件位于 .github/workflows 目录下，新建完成后目录结构如下 $ ls ./.github/workflows main.yml Github Action使用一种模块化的思路，即将很多持续集成的操作写成独立的脚本文件，放到代码仓库，让其它开发者使用。因此进行持续集成时，可以直接引用别人写好的 action，整个持续集成的过程，就是一个 actions 组合的过程。GitHub 做了一个官方市场，可以搜索到他人提交的 actions。另外，还有一个 awesome actions 的仓库，也可以找到不少 action。 我们的基本思路如下 整个流程在 blog 分支 push 时触发 只有一个job，运行在ubuntu-20.04环境下 使用官方提供的 action/checkout 获取仓库源码，注意添加参数clone主题子模块 使用 peaceiris/actions-hugo: GitHub Actions for Hugo 部署 hugo 环境，注意使用 extentded 版本（主题要求） 直接执行 hugo 命令 使用 peaceiris/actions-gh-pages 将执行的结果部署到GitHub Pages的源目录，默认即main分支的目录下。 完整的main.yml脚本内容如下 name:hugopushtogithubpageson:push:branches:- blogjobs:build-deploy:runs-on:ubuntu-20.04steps:- uses:actions/checkout@v1with:submodules:true- name:SetupHugouses:peaceiris/actions-hugo@v2with:hugo-version:'0.63.2'extended:true- name:Buildrun:HUGO_ENV=productionhugo--gc--minify- name:Deployuses:peaceiris/actions-gh-pages@v2env:ACTIONS_DEPLOY_KEY:${{secrets.ACTIONS_DEPLOY_KEY}}PUBLISH_BRANCH:mainPUBLISH_DIR:./public 保存上面的文件后，将本地仓库推送到远程，Github 检测到 .github/workflow 目录和里面的main.yml 文件，就会自动运行，在网页端可以查看运行日志，如果出现错误可以根据日志内容就行修改。 等到 workflow 运行结束，访问博客页面，就可以看到更新成功了。切换到 main 分支，也可以看到推送的网页文件，不过因为设置了默认分支为 blog，以后打开网页端该仓库，以及在本地 clone 的时候，默认都是 blog 分支。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:2","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"6. 文章发布 在 content 目录下创建 posts文件夹，写作的文章全部放到该目录下，在每篇文章开头添加元数据字段，可以是YAML或TOML格式，示例如下 title = \"Getting Started with Hugo\" description = \"\" type = [\"posts\",\"post\"] tags = [ \"go\", \"golang\", \"hugo\", \"development\", ] date = \"2014-04-02\" categories = [ \"Development\", \"golang\", ] series = [\"Hugo 101\"] [ author ] name = \"Hugo Authors\" 下面是一篇示例文章 --- title: 示例文章 date: 2023-01-30 tags: [\"博客搭建\"] categories: [\"编程技术\"] --- 这是一篇示例文章。 文章保存后将仓库新增内容推送到远程仓库： % git add . % git commit -m \"更新了一篇文章\" % git push 几分钟后即可在 https://cloud1998.github.io 看到这篇文章。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"附录I Github Action GitHub Actions 是 GitHub 在2018年10月推出的一个持续集成服务，之前一直是试用阶段，2019年末开放，据说比Travis CI 更简单更好用。 Github Actions入门可以阅读官方文档或者阮一峰大神的GitHub Actions 入门教程。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"这是我的第一篇hugo文章。 ","date":"2023-01-29","objectID":"/first_post/:0:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"我们已经在一起 var countDownDate=new Date(\"2022-09-28T19:40:00\").getTime();window.setInterval(function(){var e=(new Date).getTime()-countDownDate,t=Math.floor(e/(1e3*60*60*24)),n=Math.floor(e%(1e3*60*60*24)/(1e3*60*60)),s=Math.floor(e%(1e3*60*60)/(1e3*60)),o=Math.floor(e%(1e3*60)/1e3);document.getElementById(\"since\").innerHTML=t+\" 天 \"+n+\" 时 \"+s+\" 分 \"+o+\" 秒\"},1e3) ","date":"2022-09-28","objectID":"/since/:0:1","tags":null,"title":"Since 2022/09/28","uri":"/since/"},{"categories":null,"content":"关于网站 | 个人博客，欢迎交流 ","date":"2022-02-03","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于作者 ❤️ 爱好游戏、摄影 ","date":"2022-02-03","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"}]