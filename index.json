[{"categories":["编程技术"],"content":"本文介绍 Go 中的基本程序结构和语法。让我们从经典的 HelloWorld 程序开始。 package main import \"fmt\" func main(){ fmt.Println(\"hello, world\") } ","date":"2023-02-04","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/:0:0","tags":["Golang语法基础"],"title":"Golang语法基础2-基本结构和语法","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/"},{"categories":["编程技术"],"content":"1. 包的概念、导入与可见性 包是结构化代码的一种方式：每个程序都由包（通常简称为 pkg）的概念组成，可以使用自身的包或者从其它包中导入内容。 如同其它一些编程语言中的类库或命名空间的概念，每个 Go 文件都属于且仅属于一个包。一个包可以由许多以 .go 为扩展名的源文件组成，因此文件名和包名一般来说都是不相同的。 你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main 表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。 一个应用程序可以包含不同的包，而且即使你只使用 main 包也不必把所有的代码都写在一个巨大的文件里：你可以用一些较小的文件，并且在每个文件非注释的第一行都使用 package main 来指明这些文件都属于 main 包。如果你打算编译包名不是为 main 的源文件，如 pack1，编译后产生的对象文件将会是 pack1.a 而不是可执行程序。另外要注意的是，所有的包名都应该使用小写字母。 标准库 在 Go 的安装文件里包含了一些可以直接使用的包，即标准库。在 Windows 下，标准库的位置在 Go 根目录下的子目录 pkg\\windows_386 中；在 Linux 下，标准库在 Go 根目录下的子目录 pkg\\linux_amd64 中（如果是安装的是 32 位，则在 linux_386 目录中）。一般情况下，标准包会存放在 $GOROOT/pkg/$GOOS_$GOARCH/ 目录下。 Go 的标准库包含了大量的包（如：fmt 和 os），但是你也可以创建自己的包。 如果想要构建一个程序，则包和包内的文件都必须以正确的顺序进行编译。包的依赖关系决定了其构建顺序。 属于同一个包的源文件必须全部被一起编译，一个包即是编译时的一个单元，因此根据惯例，每个目录都只包含一个包。 如果对一个包进行更改或重新编译，所有引用了这个包的客户端程序都必须全部重新编译。 Go 中的包模型采用了显式依赖关系的机制来达到快速编译的目的，编译器会从后缀名为 .o 的对象文件（需要且只需要这个文件）中提取传递依赖类型的信息。 如果 A.go 依赖 B.go，而 B.go 又依赖 C.go： 那么编译顺序是：编译 C.go 然后 B.go、 然后是 A.go. 为了编译 A.go, 编译器读取的是 B.o 而不是 C.o. 这种机制对于编译大型的项目时可以显著地提升编译速度。 每一段代码只会被编译一次 一个 Go 程序是通过 import 关键字将一组包链接在一起。 import \"fmt\" 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。包名被封闭在半角双引号 \"\" 中。如果你打算从已编译的包中导入并加载公开声明的方法，不需要插入已编译包的源代码。 如果需要多个包，它们可以被分别导入： import ( \"fmt\" \"os\" ) 该方法被称为因式分解关键字，该方法同样适用于 const、var 和 type 的声明或定义 当你导入多个包时，最好按照字母顺序排列包名，这样做更加清晰易读。 如果包名不是以 . 或 / 开头，如 \"fmt\" 或者 \"container/list\"，则 Go 会在全局文件进行查找；如果包名以 ./ 开头，则 Go 会在相对目录中查找；如果包名以 / 开头（在 Windows 下也可以这样使用），则会在系统的绝对路径中查找。 导入包即等同于包含了这个包的所有的代码对象。 除了符号 _，包中所有代码对象的标识符必须是唯一的，以避免名称冲突。但是相同的标识符可以在不同的包中使用，因为可以使用包名来区分它们。 包通过下面这个被编译器强制执行的规则来决定是否将自身的代码对象暴露给外部文件： 可见性规则 当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是它们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。 （大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。 因此，在导入一个外部包后，能够且只能够访问该包中导出的对象。 假设在包 pack1 中我们有一个变量或函数叫做 Thing（以 T 开头，所以它能够被导出），那么在当前包中导入 pack1 包，Thing 就可以像面向对象语言那样使用点标记来调用：pack1.Thing（pack1 在这里是不可以省略的）。 因此包也可以作为命名空间使用，帮助避免命名冲突（名称冲突）：两个包中的同名变量的区别在于它们的包名，例如 pack1.Thing 和 pack2.Thing。 你可以通过使用包的别名来解决包名之间的名称冲突，或者说根据你的个人喜好对包名进行重新设置，如：import fm \"fmt\"。下面的代码展示了如何使用包的别名： package main import fm \"fmt\" func main(){ fm.Println(\"hello, world\") } 注意：如果你导入了一个包却没有使用它，则会在构建程序时引发错误，如 imported and not used: os，这正是遵循了 Go 的格言：“没有不必要的代码！”。 包的分级声明和初始化 你可以在使用 import 导入包之后定义或声明 0 个或多个常量 (const)、变量 (var) 和类型 (type)，这些对象的作用域都是全局的（在本包范围内），所以可以被本包中所有的函数调用，然后声明一个或多个函数 (func)。 ","date":"2023-02-04","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/:1:0","tags":["Golang语法基础"],"title":"Golang语法基础2-基本结构和语法","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/"},{"categories":["编程技术"],"content":"2. 函数 这是定义一个函数最简单的格式： func functionName() 你可以在括号 () 中写入 0 个或多个函数的参数（使用逗号 , 分隔），每个参数的名称后面必须紧跟着该参数的类型。 main() 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。如果你的 main 包的源代码没有包含 main() 函数，则会引发构建错误 undefined: main.main。main() 函数既没有参数，也没有返回类型（与 C 家族中的其它语言恰好相反）。如果你不小心为 main() 函数添加了参数或者返回类型，将会引发构建错误： func main must have no arguments and no return values results. 在程序开始执行并完成初始化后，第一个调用（程序的入口点）的函数是 main.main()，该函数一旦返回就表示程序已成功执行并立即退出。 函数里的代码（函数体）使用大括号 {} 括起来。 左大括号 { 必须与方法的声明放在同一行，这是编译器的强制规定，否则你在使用 gofmt 时就会出现错误提示： `build-error: syntax error: unexpected semicolon or newline before {` （这是因为编译器会产生 func main() ; 这样的结果，很明显这是错误的） Go 语言虽然看起来不使用分号作为语句的结束，但实际上这一过程是由编译器自动完成，因此才会引发像上面这样的错误 右大括号 } 需要被放在紧接着函数体的下一行。如果你的函数非常简短，你也可以将它们放在同一行： func sum(a, b int) int { return a + b } 对于大括号 {} 的使用规则在任何时候都是相同的（如：if 语句等）。 因此符合规范的函数一般写成如下的形式： func functionName(parameter_list) (return_value_list) { ... } 其中： parameter_list 的形式为 (param1 type1, param2 type2, …) return_value_list 的形式为 (ret1 type1, ret2 type2, …) 只有当某个函数需要被外部包调用的时候才使用大写字母开头，并遵循 Pascal 命名法；否则就遵循骆驼命名法，即第一个单词的首字母小写，其余单词的首字母大写。 下面这一行调用了 fmt 包中的 Println 函数，可以将字符串输出到控制台，并在最后自动增加换行字符 \\n： fmt.Println(\"hello, world\") 使用 fmt.Print(\"hello, world\\n\") 可以得到相同的结果。 Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。 当被调用函数的代码执行到结束符 } 或返回语句时就会返回，然后程序继续执行调用该函数之后的代码。 程序正常退出的代码为 0 即 Program exited with code 0；如果程序因为异常而被终止，则会返回非零值，如：1。这个数值可以用来测试是否成功执行一个程序。 ","date":"2023-02-04","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/:2:0","tags":["Golang语法基础"],"title":"Golang语法基础2-基本结构和语法","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/"},{"categories":["编程技术"],"content":"3. 注释 package main import \"fmt\" // Package implementing formatted I/O. func main(){ fmt.Printf(\"Καλημέρα κόσμε; or こんにちは 世界\\n\") } 上面这个例子通过打印 Καλημέρα κόσμε; or こんにちは 世界 展示了如何在 Go 中使用国际化字符，以及如何使用注释。 注释不会被编译，但可以通过 godoc 来使用。 单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。 每一个包应该有相关注释，在 package 语句之前的块注释将被默认认为是这个包的文档说明，其中应该提供一些相关信息并对整体功能做简要的介绍。一个包可以分散在多个文件中，但是只需要在其中一个进行注释说明即可。当开发人员需要了解包的一些情况时，自然会用 godoc 来显示包的文档说明，在首行的简要注释之后可以用成段的注释来进行更详细的说明，而不必拥挤在一起。另外，在多段注释之间应以空行分隔加以区分。 示例： // Package superman implements methods for saving the world. // // Experience has shown that a small number of procedures can prove // helpful when attempting to save the world. package superman 几乎所有全局作用域的类型、常量、变量、函数和被导出的对象都应该有一个合理的注释。如果这种注释（称为文档注释）出现在函数前面，例如函数 Abcd，则要以 \"Abcd...\" 作为开头。 示例： // enterOrbit causes Superman to fly into low Earth orbit, a position // that presents several possibilities for planet salvation. func enterOrbit() error { ... } godoc 工具会收集这些注释并产生一个技术文档。 ","date":"2023-02-04","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/:3:0","tags":["Golang语法基础"],"title":"Golang语法基础2-基本结构和语法","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/"},{"categories":["编程技术"],"content":"4. 类型 变量（或常量）包含数据，这些数据可以有不同的数据类型，简称类型。使用 var 声明的变量的值会自动初始化为该类型的零值。类型定义了某个变量的值的集合与可对其进行操作的集合。 类型可以是基本类型，如：int、float、bool、string；结构化的（复合的），如：struct、array、切片 (slice)、map、通道 (channel)；只描述类型的行为的，如：interface。 结构化的类型没有真正的值，它使用 nil 作为默认值（在 Objective-C 中是 nil，在 Java 中是 null，在 C 和 C++ 中是 NULL 或 0）。值得注意的是，Go 语言中不存在类型继承。 函数也可以是一个确定的类型，就是以函数作为返回类型。这种类型的声明要写在函数名和可选的参数列表之后，例如： func FunctionName (a typea, b typeb) typeFunc 你可以在函数体中的某处返回使用类型为 typeFunc 的变量 variable： return variable 一个函数可以拥有多返回值，返回类型之间需要使用逗号分割，并使用小括号 () 将它们括起来，如： func FunctionName (a typea, b typeb) (t1 type1, t2 type2) 示例： func Atoi(s string) (i int, err error){ ... return var1, var2 } 这种多返回值一般用于判断某个函数是否执行成功 (true/false) 或与其它返回值一同返回错误消息（详见之后的并行赋值）。 自定义类型 使用 type 关键字可以定义你自己的类型，你可能想要定义一个结构体，但是也可以定义一个已经存在的类型的别名，如： type IZ int 这里并不是真正意义上的别名，因为使用这种方法定义之后的类型可以拥有更多的特性，且在类型转换时必须显式转换。 然后我们可以使用下面的方式声明变量： var a IZ = 5 这里我们可以看到 int 是变量 a 的底层类型，这也使得它们之间存在相互转换的可能。 如果你有多个类型需要定义，可以使用因式分解关键字的方式，例如： type ( IZ int FZ float64 STR string ) 每个值都必须在经过编译后属于某个类型（编译器必须能够推断出所有值的类型），因为 Go 语言是一种静态类型语言。 类型转换 在必要以及可行的情况下，一个类型的值可以被转换成另一种类型的值。由于 Go 语言不存在隐式类型转换，因此所有的转换都必须显式说明，就像调用一个函数一样（类型在这里的作用可以看作是一种函数）： valueOfTypeB = typeB(valueOfTypeA) 示例： a := 5.0 b := int(a) // 将变量 a 强转成 int 类型 但这只能在定义正确的情况下转换成功，例如从一个取值范围较小的类型转换到一个取值范围较大的类型（例如将 int16 转换为 int32）。 当从一个取值范围较大的转换到取值范围较小的类型时（例如将 int32 转换为 int16 或将 float32 转换为 int），会发生精度丢失（截断）的情况。当编译器捕捉到非法的类型转换时会引发编译时错误，否则将引发运行时错误。 具有相同底层类型的变量之间可以相互转换： var a IZ = 5 c := int(a) d := IZ(c) ","date":"2023-02-04","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/:4:0","tags":["Golang语法基础"],"title":"Golang语法基础2-基本结构和语法","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/"},{"categories":["编程技术"],"content":"5. go程序的一般结构 下面的程序可以被顺利编译但什么都做不了，不过这很好地展示了一个 Go 程序的首选结构。这种结构并没有被强制要求，编译器也不关心 main() 函数在前还是变量的声明在前，但使用统一的结构能够在从上至下阅读 Go 代码时有更好的体验。 所有的结构将在本文或接下来的章节中进一步地解释说明，但总体思路如下： 在完成包的 import 之后，开始对常量、变量和类型的定义或声明。 如果存在 init() 函数的话，则对该函数进行定义（这是一个特殊的函数，每个含有该函数的包都会首先执行这个函数）。 如果当前包是 main 包，则定义 main() 函数。 然后定义其余的函数，首先是类型的方法，接着是按照 main() 函数中先后调用的顺序来定义相关函数，如果有很多函数，则可以按照字母顺序来进行排序。 package main import ( \"fmt\" ) const c = \"C\" var v int = 5 type T struct{} func init() { // initialization of package } func main() { var a int Func1() // ... fmt.Println(a) } func (t T) Method1() { // ... } func Func1() { // exported function Func1 // ... } Go 程序的执行（程序启动）顺序如下： 按顺序导入所有被 main 包引用的其它包，然后在每个包中执行如下流程： 如果该包又导入了其它的包，则从第一步开始递归执行，但是每个包只会被导入一次。 然后以相反的顺序（自下往上）在每个包中初始化常量和变量，如果该包含有 init() 函数的话，则调用该函数。 在完成这一切之后，main 也执行同样的过程，最后调用 main() 函数开始执行程序。 ","date":"2023-02-04","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/:5:0","tags":["Golang语法基础"],"title":"Golang语法基础2-基本结构和语法","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/"},{"categories":["编程技术"],"content":"6. 命名规范 干净、可读的代码和简洁性是 Go 追求的主要目标。通过 gofmt 来强制实现统一的代码风格。Go 语言中对象的命名也应该是简洁且有意义的。像 Java 和 Python 中那样使用混合着大小写和下划线的冗长的名称会严重降低代码的可读性。 名称不需要指出自己所属的包，因为在调用的时候会使用包名作为限定符。 返回某个对象的函数或方法的名称一般都是使用名词，没有 Get... 之类的字符，如果是用于修改某个对象，则使用 SetName()。 有必须要的话可以使用大小写混合的方式，如 MixedCaps() 或 mixedCaps()，而不是使用下划线来分割多个名称。 ","date":"2023-02-04","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/:6:0","tags":["Golang语法基础"],"title":"Golang语法基础2-基本结构和语法","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E6%B3%95/"},{"categories":["编程技术"],"content":"1. 起源与发展 Go/Golang 起源于2007年，并于 2009 年正式对外发布，是一个完全开源的项目，背后的支持者是谷歌公司，它的主要目标是「兼具 Python 等动态语言的开发速度和 C/C++ 等编译型语言的性能与安全性」。它不但能让你访问底层操作系统，还提供了强大的网络编程和并发编程支持。 Go 的核心设计者是三位著名IT工程师：Ken Thompson，Rob Pike，Robert Griesemer。其中 Ken Thompson 是 Unix 操作系统的设计者，并因此获得图灵奖，也是 C 语言前身 B 语言的设计者，UTF-8 编码设计者之一，计算机史的重要人物，2006 年加入谷歌，和另外两人一起设计了 Go 语言。 Rob Pike 是 Ken 的老搭档。 随后又有 lan Lance Taylor 和 Russ Cox 两人加入团队，前者是 gccgo 编译器的作者和 cgo 工具链的维护者，后者加入团队后着手 Go 语言标准库的开发。 Go 语言以囊地鼠(Gopher)为图标和吉祥物，这是才华横溢的插画家 Renee French 设计的，她也是 Go 设计者之一 Rob Pike 的妻子。囊地鼠是一种原产于加拿大的啮齿类动物，Go 语言开发者也一般自称为 Gopher。 Go 语言相比于其它语言的最大优势在于它的执行性能与开发效率，这得益于 Go 在并发编程、内存回收等许多方面的良好设计，并因此大规模用于服务器编程、网络编程、数据库和云平台领域。 Go 是一种编译型的语言。它使用编译器来编译代码。编译器将源代码编译成二进制（或字节码）格式；在编译代码时，编译器检查错误、优化性能并输出可在不同平台上运行的二进制文件。要创建并运行 Go 程序，程序员必须执行如下步骤。 使用文本编辑器创建 Go 程序； 保存文件； 编译程序； 运行编译得到的可执行文件。 这不同于 Python、Ruby 和 JavaScript 等语言，它们不包含编译步骤。Go 自带了编译器，因此无须单独安装编译器。 比较出名的 Go 语言项目有(不限于这些) Go语言本身： https://github.com/golang/go Docker： https://www.docker.com/ kubernetes： https://github.com/kubernetes/kubernetes Ethereum： https://github.com/ethereum/go-ethereum fabric： https://github.com/hyperledger/fabric Hugo： https://github.com/gohugoio/hugo TiDB： https://github.com/pingcap/tidb InfluxDB： https://github.com/influxdata/influxdb ETCD： https://github.com/etcd-io/etcd 使用 Go 的国外公司有：Google、Docker、NetFlix、CloudFlare、Dropbox、MongoDB、Uber等。 使用 Go 的国内公司有：七牛、字节跳动、bilibili、京东、百度、小米、腾讯、阿里等。 ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:1:0","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"2. 跟踪最新动态 最直接的方式是跟踪 Go 语言的源码库，关注提交历史和 issue 原始代码库： https://go.googlesource.com/go github镜像： https://github.com/golang/go 其它活跃论坛或动态 golang-dev：Google邮件列表的Go开发组讨论区 golang-nuts：Google邮件列表的Go讨论社区 golang-announce：发布Go版本或Go开发的最新状态 go.dev：2019.11.14上线的Go开发人员中心 gotime：Go的一个播客，每周一更，内容有干货 @golang：Go 语言在 Twitter 的官方帐号 Go 下载地址和相关的文档、标准库等访问地址为 官网 https://golang.org/ 国内的镜像网站 https://golang.google.cn/ Go语言中文网 是国内最活跃的Go社区，每周会发行一份 Go语言爱好者周刊 Go 相关资料聚集最多的还是 go wiki ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:2:0","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"3. 下载安装 MacOS 下快速安装可以使用 Homebrew ，执行如下命令即可 $ brew install go 自动配置环境变量，安装完重启终端即可使用。 安装 Go 完成后，通过 brew list 查看，是否已安装成功。 用 go version 查看当前go的版本号。 需要升级 Go 语言版本的，输入以下命令： $ brew upgrade go 下面开始介绍常规的安装方法。 ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:3:0","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"3.1 下载安装 Golang 中国官网下载页面为 golang.google.cn/dl，为 Windows、MacOS 和 Linux 三种环境都提供了安装包。 Windows 默认下载文件为 go1.20.windows-amd64.msi，双击启动即可安装，默认安装到Program Files 或Program Files (x86)。也可以根据需要更改位置。安装后，需要关闭并重新打开所有打开的命令提示符，以便安装程序对环境所做的更改反映在命令提示符中。环境变量将自动设置。但如果下载了以.zip为后缀的版本，则需要自己解压到合适的路径，并自己设置环境变量。 MacOS 默认下载文件为 go1.20.darwin-amd64.pkg，该软件包将 Go 发行版安装到 /usr/local/go。该包应将 /usr/local/go/bin 目录放入您的 PATH环境变量中。安装后，需要重新启动所有打开的终端会话才能使更改生效。 ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:3:1","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"3.2 配置 打开终端配置代理 go env -w GOPROXY=https://goproxy.cn,direct ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:3:2","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"4. 编辑器/IDE Golang 开发最流行的两个工具是 Goland 和 VScode，我自己是 VScode 的使用者。除了这两个工具外，官方还提供了一份IDE和插件列表。 VScode 中的 Go 扩展提供了大量的特性，如自动补全、悬停信息显示、括号匹配等，原本属于第三方开发者维护，现在交给了 Go 团队。详细的特性说明查看官网或是VS Code 中的 Go 扩展 Github 项目，下面进行一些简单介绍。 ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:4:0","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"4.1 Go工具链 微软在开发 VS Code 过程中, 定义了一种协议： 语言服务器协议 ，用来为每种语言提供诸如自动完成，代码提示等功能。gopls 就是Go语言的服务器。 当在 VS Code 中编辑 Go 代码时如果没有安装，VScode 会在右下角弹出提示，只要直接点击 Install 即可，不需要自己输入命令。默认使用了 GOPATH 作为安装路径。 如果没有弹出，则在 VS Code 中安装 Go 扩展插件 shift+command+p 搜索 \u003eGo: Insatall/Update Tools 全选后确定 分别包括了以下 7 种工具： gotests # 测试工具，根据函数签名生成测试用例。 gomodifytags # 一个修改 Go 源代码文件中结构体字段标签的 Go 工具。 impl # 一个根据其使用情况生成接口方法存根的 Go 工具。 goplay # 一个在线实验 Go 代码的游乐场。 dlv # Go 语言的调试器，它允许开发人员暂停程序执行，检查变量的值，设置断点，以及执行其他调试操作。 staticcheck # 一个 Go 静态检查工具，对 Go 源代码执行各种检查，包括检测潜在错误、找到代码缓慢、不安全或过于复杂的代码。 gopls # Go 语言服务器是一个为各种文本编辑器和集成开发环境（IDE）提供语言特定功能的工具，例如代码导航、代码完成和诊断等。 ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:4:1","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"4.2 用户和工作区设置 使用 VS Code 需要关心的一个重要部分是用户和工作区设置，几乎所有的事情都和它们有关。 这是两种不同的设置范围 用户设置：是一个全局的设置，适用于打开的任何VScode窗口 工作区设置：是指项目工作区的设置，只适用于对应的工作区（譬如某个文件夹） 工作区的设置会覆盖掉用户设置，它针对具体的项目，配置文件位于项目根目录.vscode文件夹，可与其它开发者共享。.vscode文件夹还用于存放调试配置和任务配置。 点击左下角的齿轮，选择设置，默认的设置界面是一个可视化的界面，不过也可以使用settings.json配置文件 用户设置文件在 Windows 中位于 %APPDATA%\\Code\\User\\settings.json 用户设置文件在 MacOS 中位于 ~/Library/Application Support/Code/User/settings.json 工作区设置文件位于根目录的 .vscode 文件夹中 请注意，~ 表示用户主目录。因此，如果您的用户名是 “Cloud”，则该文件位于： /Users/Cloud/Library/Application Support/Code/User/settings.json 如果文件不存在，您可以打开 VSCode，单击文件菜单，然后单击首选项 \u003e 设置。您可以在此处编辑设置，VSCode 将自动创建该文件。 最后，VScode大量的操作都可以通过命令完成，使用快捷键Ctrl+Shift+P可以打开命令输入框。 ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:4:2","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"4.3 特性说明 在用户或工作区设置中，将 go.autocompleteUnimportedPackages 设为 true ，可以在代码中点击包名跳转查看包的具体内容。 鼠标悬停在变量、函数和结构体的名称上方可以查看它们的签名等信息，这一功能需要 godoc 或 gogetdoc 实现，通过在用户或工作区设置中调整 go.docsTool 来切换工具。 代码导航功能无需设置默认实现。 对源码的保存操作会自动触发格式化、编译和代码质量检查。格式化工具可以通过调整go.formatTool来设置。 编译的过程使用go build命令。 代码质量检查的工具为golint，也可以使用gometalinter，用来检查代码的规范性，检查得到的errors和warning会在编辑器里以红色/绿色波浪线标出来，下面的输出窗口也会显示详细信息。 ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:4:3","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"4.4 调试 调试使用的是前面安装的delve工具。在 VScode 中，按F5启动调试，一般情况下使用默认的调试配置即可，不过还是应当对调试配置选项有一定的了解。 具体调试方法可查看 Debugging Go code using VS Code，更多关于 VS Code 中 Go 调试的相关信息都可查看该文档。 运行程序使用快捷键Ctrl+F5，和调试使用的是同一个配置文件。 ","date":"2023-02-02","objectID":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/:4:4","tags":["Golang语法基础"],"title":"Golang语法基础1-背景与初探","uri":"/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%88%9D%E6%8E%A2/"},{"categories":["编程技术"],"content":"本系列主要介绍数据库和 SQL 的基础知识，使用的教材是SQL必知必会。 数据库(database)是保存有组织的数据的容器（通常是一个文件或一组文件）。简单来说，数据库是一个用于存储大量数据的系统。它允许你快速地存储、检索和更新数据。这些数据可以是客户信息、销售数据、财务数据等。 数据库又可根据数据的存储方式分成不同的种类，例如： 关系数据库（例如：MySQL、Oracle、SQL Server） 非关系数据库（例如：MongoDB、Redis） SQL (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统（RDBMS）。 SQL 的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。 人们通常用数据库这个术语来代表他们使用的数据库软件，这是不正确的，也因此产生了许多混淆。确切地说，数据库软件应称为数据库管理系统(DBMS) 数据库是通过DBMS创建和操纵的容器，而具体它究竟是什么，形式如何，各种数据库都不一样。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:0:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"1. 关系型数据库 关系型数据库是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。简单说，关系型数据库是由多张能互相连接的表组成的数据库。 你往文件柜里放资料时，并不是随便将它们扔进某个抽屉就完事了的，而是先准备好一个资料袋，然后将相关的资料放入特定的资料袋中。在数据库领域中，这种资料袋称为表。表是一种结构化的文件，可用来存储某种特定类型的数据。表可以保存顾客清单、产品目录，或者其他信息清单。 优点 都是使用表结构，格式一致，易于维护。 使用通用的 SQL 语言操作，使用方便，可用于复杂查询。 数据存储在磁盘中，安全。 缺点 读写性能比较差，不能满足海量数据的高效率读写。 不节省空间。因为建立在关系模型上，就要遵循某些规则，比如数据中某字段值即使为空仍要分配空间。 固定的表结构，灵活度较低。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:1:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"2. 非关系数据库（NoSQL） 非关系型数据库被称为 NoSQL（Not Only SQL )，意为不仅仅是 SQL。通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定。 优点 非关系型数据库存储数据的格式可以是 key-value 形式、文档形式、图片形式等。使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。 速度快，效率高。 NoSQL 可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘。 海量数据的维护和处理非常轻松。 非关系型数据库具有扩展简单、高并发、高稳定性、成本低廉的优势。 可以实现数据的分布式处理。 缺点 非关系型数据库暂时不提供 SQL 支持，学习和使用成本较高。 非关系数据库没有事务处理，没有保证数据的完整性和安全性。适合处理海量数据，但是不一定安全。 功能没有关系型数据库完善。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:2:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"3. MySQL 为了更好地应用SQL，我们需要安装一个MySQL便于学习过程中进行练习。 MySQL 是最流行的数据库之一，是一个免费开源的关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 适合中小型软件，被个人用户以及中小企业青睐。 针对不同的用户，MySQL 分为两个版本： MySQL Community Server（社区版）：该版本是自由下载且完全免费的，但是官方不提供技术支持。 MySQL Enterprise Server（企业版）：该版本是收费的，而且不能下载，但是该版本拥有完善的技术支持 MySQL 的命名机制由 3 个数字和 1 个后缀组成，例如 mysql-5.7.20： 第 1 个数字“5”是主版本号，用于描述文件的格式，所有版本 5 的发行版都有相同的文件夹格式。 第 2 个数字“7”是发行级别，主版本号和发行级别组合在一起便构成了发行序列号。 第 3 个数字“20”是在此发行系列的版本号，随每次新发行的版本递增。通常选择已经发行的最新版本。 MySQL 的主要特点就是免费，并且在任何平台上都能使用，占用空间相对较小。 MySQL 是 C/S 架构，有 Client 和 Server 两部分，可以都安装在一台电脑上，也可以独立安装。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:3:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"4. 安装与配置 官方下载页面：https://dev.mysql.com/downloads/ MacOS安装可参考这个视频： ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:4:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"5. 图形化管理工具 常用的图形化管理工具有 MySQL Workbench 和 Navicat，前者是官方提供的工具，但后者比较好用。 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:5:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"6. SQL 对数据库进行查询和修改操作的语言叫做 SQL（Structured Query Language，结构化查询语言）。SQL 语言是目前广泛使用的关系数据库标准语言，是各种数据库交互方式的基础。SQL包括四部分 数据定义语言（Data Definition Language，DDL）：用来创建或删除数据库以及表等对象，主要包含以下几种命令： DROP：删除数据库和表等对象 CREATE：创建数据库和表等对象 ALTER：修改数据库和表等对象的结构 数据操作语言（Data Manipulation Language，DML）：用来变更表中的记录，主要包含以下几种命令：- SELECT：查询表中的数据 INSERT：向表中插入新数据 UPDATE：更新表中的数据 DELETE：删除表中的数据 数据查询语言（Data Query Language，DQL）：用来查询表中的记录，主要包含 SELECT 命令，来查询表中的数据。 数据控制语言（Data Control Language，DCL）：用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对数据库中的用户设定权限。主要包含以下几种命令： GRANT：赋予用户操作权限 REVOKE：取消用户的操作权限 COMMIT：确认对数据库中的数据进行的变更 ROLLBACK：取消对数据库中的数据进行的变更 我们将在接下来的几篇文章中学习它们。 SQL 的几个易错书写规则如下 以分号 ; 结尾 SQL 语句不区分大小写 单词需要半角空格或换行来分隔 ","date":"2023-02-01","objectID":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/:6:0","tags":["数据库"],"title":"SQL学习1-入门","uri":"/sql%E5%AD%A6%E4%B9%A01-%E5%85%A5%E9%97%A8/"},{"categories":["编程技术"],"content":"Hugo 是由 Go 语言实现的静态网站生成器，可以快速建立一个静态网站，虽然多数情况下用来搭建个人博客，但也可以用作展示在线书籍、个人简历等。 最早我也是使用 Hugo 搭建的个人博客，由于之前才疏学浅，我所使用的博客出现了一些 bug，我无法修复，因此也很久没有更新过文章。借着 2023 年的春节，我重新搭建了这个博客。其中很多细节已经忘记了，因此耗费了我不少时间，为了节约精力，因而有了这篇文章小记，方便自己以及后人。 本文用来记录 Hugo 使用种遇到的问题和积累的经验。本文是第一篇（也许也是最后一篇），介绍博客网站搭建的过程和一些基础配置。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:0:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"1. 安装Hugo 安装Hugo前请确保您的电脑上已安装了 Git 和 Go 。 详细的安装说明参见官方文档，这里简单介绍 MacOS 的快速安装。 MacOS 下可自行从官网下载软件包安装，也可以使用 Homebrew 包管理工具快速安装 # 更新homebrew到最新 % brew update # 安装hugo（用homebrew默认安装扩展版本） % brew install hugo # 检查安装 % brew list 注意要安装 extended 版本，主要是因为很多主题都需要扩展版的功能，如果确认自己的主题不需要(阅读主题说明)，可以按照正常的版本。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"2. 生成博客网站 执行下面的命令在本地生成博客网站项目文件夹，该文件夹是这一系列文章之后所有操作执行的根目录(简称为项目根目录)，我建立的项目文件夹名为 cloud1998.github.io （因为之后要使用 Github Pages 托管博客）。 % hugo new site cloud1998.github.io % cd cloud1998.github.io blog 文件夹的目录结构如下所示： % ls config.toml layouts static archetypes content themes assets data resources 其中： config.toml 是博客的配置文件 content 是博客文章存放的地方 themes 是博客主题目录 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"3. 安装主题 Hugo没有默认主题，需要自己从官方的主题列表下载安装。其中 LoveIt 是我喜欢的主题。因为主题通常是单独的 Github 仓库，因此将其作为博客项目的子模块进行管理。 # 初始化项目目录为 git 仓库 git init # 将主题项目作为子模块添加 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 复制主题提供的站点配置文件 config.toml 到项目根目录，覆盖 Hugo 本身的站点配置文件。 请打开下面的代码块查看完整的配置⬇️： baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 默认每页列表显示的文章数目 paginate = 12 # 谷歌分析代号 [UA-XXXXXXXX-X] googleAnalytics = \"\" # 版权描述，仅仅用于 SEO copyright = \"\" # 是否使用 robots.txt enableRobotsTXT = true # 是否使用 git 信息 enableGitInfo = true # 是否使用 emoji 代码 enableEmoji = true # 忽略一些构建错误 ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [params] # 网站默认主题样式 [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站标题, 用于 Open Graph 和 Twitter Cards title = \"我的网站\" # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \"这是我的全新 Hugo 网站\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # 移动端导航栏模式 [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"我的网站\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 (允许 HTML 格式) subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"4. 网站配置 正式使用前，我们需要编辑站点配置文件从而设置网站的一些内容，上面的配置文件已经进行了详细的说明，如有更多疑问请查阅LoveIt官方主题文档。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"4.1 头像 新建static/images文件夹，将头像文件 avatar.png 存放在这里。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:1","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"4.2 网站图标 使用 favicon generator 生成配套的网站图标，放到 /static 目录下，可以设置网站在各平台的显示图标，包括如下内容 android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png browserconfig.xml cover.png favicon.ico favicon-16x16.png favicon-32x32.png logo.png mstile-150x150.png safari-pinned-tab.svg site.webmanifest 然后修改站点配置文件中的配置项即可。 更多配置可以参考Mogeko的个人博客 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:2","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"5. 托管到Github 将本地的所有项目文件提交到本地仓库中。 % git add . % git commit -m \"Initial commit\" 浏览器打开 Github 网站，创建和项目文件夹同名的仓库，该仓库用于存储项目文件夹下所有内容。创建完成后，在本地项目根目录，执行下列命令，将项目文件推送到远程仓库。 % git remote add origin https://github.com/cloud1998/cloud1998.github.io.git % git push -u origin main 关于网页如何托管在Github的详细说明可以参考Host on Github ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"5.1 源码备份 按照 Hugo 的生成规则，执行 hugo 命令后，网站静态文件将会生成在 public 文件夹。但由于我们使用 Github Pages 托管博客网站，该功能启用后 Github 仓库只会从 main branch 或 main branch 中的 /docs 目录下读取网站源码。 我们解决这一问题的方法是新建 blog 分支将博客源码放在该分支下，利用 Github Action 自动根据 blog 分支的博客源码执行 hugo 命令，并将生成的结果推送到 main 分支。首先在本地项目根目录下执行下列命令新建并切换到 blog 分支。 注：Github Action 的说明见附录I % git checkout -b blog % git branch * blog main # 将新分支推送到远程仓库 并建立跟踪关系 % git push -u origin blog 在使用 “git push” 时，第一次推送新分支时，需要使用 “–set-upstream” 或 “-u” 选项，以便在远程仓库中设置跟踪关系。 将本地 blog 分支的内容推送到远程仓库后，在网页端进入cloud1998.github.io仓库的设置页面，将默认分支设置为 blog 分支。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:1","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"5.2 推送到main分支 首先生成公私钥供 Github Action 使用 ssh-keygen -t rsa -b 4096 -C \"$(git config user.email)\" -f blog -N \"\" # You will get 2 files in current file: # blog.pub (public key) # blog (private key) 然后进入 cloud1998.github.io 仓库设置页面，在 Deploy Keys 中添加公钥，在 Secrets 中添加私钥，私钥名设置为 ACTIONS_DEPLOY_KEY 接着新建 YAML 配置文件，Github Action 要求配置文件位于 .github/workflows 目录下，新建完成后目录结构如下 $ ls ./.github/workflows main.yml Github Action使用一种模块化的思路，即将很多持续集成的操作写成独立的脚本文件，放到代码仓库，让其它开发者使用。因此进行持续集成时，可以直接引用别人写好的 action，整个持续集成的过程，就是一个 actions 组合的过程。GitHub 做了一个官方市场，可以搜索到他人提交的 actions。另外，还有一个 awesome actions 的仓库，也可以找到不少 action。 我们的基本思路如下 整个流程在 blog 分支 push 时触发 只有一个job，运行在ubuntu-20.04环境下 使用官方提供的 action/checkout 获取仓库源码，注意添加参数clone主题子模块 使用 peaceiris/actions-hugo: GitHub Actions for Hugo 部署 hugo 环境，注意使用 extentded 版本（主题要求） 直接执行 hugo 命令 使用 peaceiris/actions-gh-pages 将执行的结果部署到GitHub Pages的源目录，默认即main分支的目录下。 完整的main.yml脚本内容如下 name:hugopushtogithubpageson:push:branches:- blogjobs:build-deploy:runs-on:ubuntu-20.04steps:- uses:actions/checkout@v1with:submodules:true- name:SetupHugouses:peaceiris/actions-hugo@v2with:hugo-version:'0.63.2'extended:true- name:Buildrun:HUGO_ENV=productionhugo--gc--minify- name:Deployuses:peaceiris/actions-gh-pages@v2env:ACTIONS_DEPLOY_KEY:${{secrets.ACTIONS_DEPLOY_KEY}}PUBLISH_BRANCH:mainPUBLISH_DIR:./public 保存上面的文件后，将本地仓库推送到远程，Github 检测到 .github/workflow 目录和里面的main.yml 文件，就会自动运行，在网页端可以查看运行日志，如果出现错误可以根据日志内容就行修改。 等到 workflow 运行结束，访问博客页面，就可以看到更新成功了。切换到 main 分支，也可以看到推送的网页文件，不过因为设置了默认分支为 blog，以后打开网页端该仓库，以及在本地 clone 的时候，默认都是 blog 分支。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:2","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"6. 文章发布 在 content 目录下创建 posts文件夹，写作的文章全部放到该目录下，在每篇文章开头添加元数据字段，可以是YAML或TOML格式，示例如下 title = \"Getting Started with Hugo\" description = \"\" type = [\"posts\",\"post\"] tags = [ \"go\", \"golang\", \"hugo\", \"development\", ] date = \"2014-04-02\" categories = [ \"Development\", \"golang\", ] series = [\"Hugo 101\"] [ author ] name = \"Hugo Authors\" 下面是一篇示例文章 --- title: 示例文章 date: 2023-01-30 tags: [\"博客搭建\"] categories: [\"编程技术\"] --- 这是一篇示例文章。 文章保存后将仓库新增内容推送到远程仓库： % git add . % git commit -m \"更新了一篇文章\" % git push 几分钟后即可在 https://cloud1998.github.io 看到这篇文章。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:6:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["编程技术"],"content":"附录I Github Action GitHub Actions 是 GitHub 在2018年10月推出的一个持续集成服务，之前一直是试用阶段，2019年末开放，据说比Travis CI 更简单更好用。 Github Actions入门可以阅读官方文档或者阮一峰大神的GitHub Actions 入门教程。 ","date":"2023-01-30","objectID":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:7:0","tags":["博客搭建"],"title":"hugo搭建个人博客1-基础建站","uri":"/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"这是我的第一篇hugo文章。 ","date":"2023-01-29","objectID":"/first_post/:0:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"我们已经在一起 var countDownDate=new Date(\"2022-09-28T19:40:00\").getTime();window.setInterval(function(){var e=(new Date).getTime()-countDownDate,t=Math.floor(e/(1e3*60*60*24)),n=Math.floor(e%(1e3*60*60*24)/(1e3*60*60)),s=Math.floor(e%(1e3*60*60)/(1e3*60)),o=Math.floor(e%(1e3*60)/1e3);document.getElementById(\"since\").innerHTML=t+\" 天 \"+n+\" 时 \"+s+\" 分 \"+o+\" 秒\"},1e3) ","date":"2022-09-28","objectID":"/since/:0:1","tags":null,"title":"Since 2022/09/28","uri":"/since/"},{"categories":null,"content":"关于网站 | 个人博客，欢迎交流 ","date":"2022-02-03","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于作者 ❤️ 爱好游戏、电影 ","date":"2022-02-03","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"}]